unit Padrao;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, DB, Buttons, ExtCtrls, Menus, Contnrs, UMesAno,
  UPersistentObject, cxControls, cxContainer, cxEdit, cxGraphics,
  UNumberFunctions, cxDBLookupComboBox, cxDropDownEdit, Generics.Collections,
  cxPC, Clipbrd, URegFunctions, UMsgFunctions;

type
  TfrmPadrao = class;
  TfrmPadraoClass = class of TfrmPadrao;

  TDataSetItem = class
  private
    FDataSet: TDataSet;
    FActive: Boolean;
    FFiltered: Boolean;
    FFilter: String;
  public
    constructor Create(DataSet: TDataSet);
    property Active: Boolean  read FActive write FActive;
    property DataSet: TDataSet read FDataSet write FDataSet;
    property Filter: String read FFilter write FFilter;
    property Filtered: Boolean  read FFiltered write FFiltered;
  end;

  TfrmPadrao = class(TForm)
    pnlBotoes: TPanel;
    btnGravar: TSpeedButton;
    btnCancelar: TSpeedButton;
    Bevel1: TBevel;
    procedure FormKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnGravarClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormCreate(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
  private
    { Private declarations }
    FDataSet     : TDataSet;
    FTemDataSet  : Boolean;
    FStayOpen    : Boolean;
    FAskOnCancel : Boolean;
    iQtdCmp      : Integer;
    FAutoInsert,
    FAutoPost    : Boolean; // Variáveis para controlar a Auto-Insert e o Auto-Post
    FConfigGrid  : Boolean;
    FAutoCancel   : Boolean;
    FFromLookup : Boolean;//Verifica se o formulário está sendo chamado por outro formulário
    FControlsToCheck: TObjectList;
    FPersistentObject: TPersistentObject;
    FCheckProcess: Boolean;
    DObjectEvents: TObjectDictionary<TObject, TNotifyEvent>;
    BAssigned: Boolean;
    procedure SetDataSet(DataSet: TDataSet);
    procedure VerificarComponentes(Owner: TComponent);
    procedure SetFocusObject(Obj: TObject);
    procedure LookupExit(Sender: TObject);
    procedure AssignExitEvent(Sender: TObject);
    function CanChangeFocus: Boolean;
  protected
    stlComponent : TStringList;
    procedure OpenDataSets; virtual;
    procedure CloseDataSets; virtual;
    procedure Initialize; virtual;
    procedure DeInitialize; virtual;

    procedure AddControlToCheck(ObjectControl: TObject);
    function CheckControls: Boolean; virtual;
    function LoadObject: Boolean; virtual; abstract;
    function SaveObject: boolean; virtual;
    function ChangePage(Page: TcxPageControl; bPerform: Boolean = True): Boolean;
  public
    { Public declarations }
    procedure CfgObr; dynamic;// Procedure para deixar os campos obrigatório vermelhos
    property DataSet     : TDataSet      read FDataSet      write SetDataSet;
    property StayOpen    : Boolean       read FStayOpen     write FStayOpen;
    property AskOnCancel : Boolean       read FAskOnCancel  write FAskOnCancel;
    property AutoInsert  : Boolean       read FAutoInsert   write FAutoInsert default True;
    property AutoPost    : Boolean       read FAutoPost     write FAutoPost   default True;
    property ConfigGrid  : Boolean       read FConfigGrid   write FConfigGrid;
    property AutoCancel  : Boolean       read FAutoCancel   write FAutoCancel default True;
    property PersistentObject: TPersistentObject read FPersistentObject write FPersistentObject;
    property CheckProcess: Boolean       read FCheckProcess write FCheckProcess;
  published
    class function Execute(PersistentObject: TPersistentObject; DataSet: TDataSet; AOwner: TComponent = Nil): boolean; overload; virtual;

    property FromLookup  : Boolean     read FFromLookup write FFromLookup;
  end;

var
  frmPadrao: TfrmPadrao;

implementation

uses JvEditor, USistemaControle, Math, TypInfo,
  UStringFunctions, cxGroupBox, cxGridDBTableView, cxDBEdit,
  cxButtonEdit, MaskEditN, cxCalendar, cxMaskEdit, cxMemo, cxTL, cxTextEdit,
  CurrencyEditN, cxCurrencyEdit, DBCurrencyEditN, cxGridCustomView;

{$R *.dfm}

{ TDataSetItem }

constructor TDataSetItem.Create(DataSet: TDataSet);
begin
  Self.DataSet  := DataSet;
  Self.Active   := DataSet.Active;
  Self.Filter   := DataSet.Filter;
  Self.Filtered := DataSet.Filtered;
end;

{ TfrmPadrao }

procedure TfrmPadrao.SetDataSet(DataSet: TDataSet);
begin
  FTemDataSet := DataSet <> nil;
  FDataSet    := DataSet;
end;

procedure TfrmPadrao.VerificarComponentes(Owner: TComponent);
var
  i: Integer;
begin
  for i := 0 to Owner.ComponentCount - 1 do
   begin
    // Resetando a cor dos group boxes
    if Owner.Components[i] is TcxGroupBox then
     TcxGroupBox(Owner.Components[i]).Style.RestoreDefaults;

    // Adicionando o evento OnExit aos lookups
    if ((Owner.Components[i] is TcxDBLookupComboBox) or
        (Owner.Components[i] is TcxLookupComboBox) or
        (Owner.Components[i] is TcxComboBox) or
        (Owner.Components[i] is TcxDBComboBox)) and not BAssigned then
       AssignExitEvent(Self.Components[i]);

    // Checando se existe grid para retirar a seleção do grid.
    if (Owner.Components[i] is TcxGridDBTableView) and Self.ConfigGrid then
     begin
      TcxGridDBTableView(Owner.Components[i]).OptionsSelection.HideSelection := True;
      TcxGridDBTableView(Owner.Components[i]).OptionsSelection.HideFocusRectOnExit := TcxGridDBTableView(Owner.Components[i]).OptionsSelection.HideSelection;
     end;

    // Contando os componentes
    if (((Owner.Components[i] is TWinControl)       and
         (TWinControl(Owner.Components[i]).TabStop) and
         (TWinControl(Owner.Components[i]).Enabled) and not
         (Owner.Components[i] is TButtonControl))   or
         (Owner.Components[i] is TFrame)            or
         (Owner.Components[i] is TcxDBButtonEdit)   or
         (Owner.Components[i] is TRadioGroup))      then
     Inc(iQtdCmp);

    if (Owner.Components[i] is TWinControl) then
     if not TWinControl(Owner.Components[i]).Enabled then Continue;

{1} if (Owner.Components[i].Tag > 0) and (Owner.Components[i].Tag < 20) then
     begin
      if (Owner.Components[i] is TFrame) then
       Self.VerificarComponentes(Owner.Components[i]);
{2}
      if (TWinControl(Owner.Components[i]).Parent is TcxGroupBox) then
       begin
        if not((Owner.Components[i] is TcxCustomButtonEdit) or (Owner.Components[i] is TSpeedButton)) and IsPublishedProp(TcxCustomEditProperties(TcxTextEdit(owner.Components[i]).Properties), 'ReadOnly') then
         if (GetOrdProp(TcxCustomEditProperties(TcxTextEdit(owner.Components[i]).Properties), 'ReadOnly') = 1) then
          Continue;

        // A cor dos GroupBoxes que armazenam campos obrigatórios e diferenciada
        TcxGroupBox(TWinControl(Owner.Components[i]).Parent).Style.TextColor  := clMaroon;
        TcxGroupBox(TWinControl(Owner.Components[i]).Parent).Style.Font.Color := clMaroon;

        // Os indices dos componentes obrigatório são guardados nesta StringList. Para que mais tarde
        // estes possam ser usados para setar o foco para o campo de preenchimento obrigatório.
        stlComponent.AddObject(IntToStr(i), Owner.Components[i]);

        if (Owner.Components[i] is TcxDBMaskEdit) or (Owner.Components[i] is TMaskEditN) or (Owner.Components[i] is TcxDateEdit) then
         Self.AddControlToCheck(Owner.Components[i]);
       end;{2}
     end;{1}
   end;
end;

function TfrmPadrao.SaveObject: boolean;
begin
  Result := Self.PersistentObject.Save;

  if Result and Assigned(Self.DataSet) then
   Self.DataSet.Refresh;
end;

procedure TfrmPadrao.Initialize;
begin
//
end;

procedure TfrmPadrao.CloseDataSets;
begin
  //
end;

class function TfrmPadrao.Execute(PersistentObject: TPersistentObject;
  DataSet: TDataSet; AOwner: TComponent): boolean;
var
  objForm: TfrmPadrao;
begin
  objForm := Self.Create(AOwner);

  try
   objForm.PersistentObject := PersistentObject;
   objForm.DataSet          := DataSet;

   Result := objForm.ShowModal = mrOK;
  finally
   objForm.Free;
  end;
end;

procedure TfrmPadrao.OpenDataSets;
begin
  //
end;

procedure TfrmPadrao.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  i  : Integer;
  ctr: TWinControl;
  s  : String;
begin
  case Key of
   VK_RETURN :
    begin
     if (ActiveControl <> nil) then
      begin
       // Condição exclusiva para dxMaskEdit devido a problemas com execução do validate 2x
       if (ActiveControl is TcxCustomMaskEdit) then
        begin
         if TcxCustomMaskEdit(ActiveControl).ModifiedAfterEnter then
          begin
           Key := 0;
           Exit;
          end;
        end
       else if ActiveControl is TcxCustomDateEdit then
        begin
         if TcxCustomDateEdit(ActiveControl).ModifiedAfterEnter then
          begin
           Key := 0;
           Exit;
          end;
        end
       else if (ActiveControl.Parent is TcxCustomLookupComboBox) or (ActiveControl.Parent is TcxCustomComboBox) then
        if TcxCustomLookupComboBox(ActiveControl.Parent).DroppedDown then
         Exit;


       if CanChangeFocus then
        begin
         if Shift = [ssCtrl] then Exit;

         Key := 0;

         ctr := ActiveControl;

         // Passando para o próximo componente
         Perform(WM_NextDlgCtl, 0, 0);

         if (ActiveControl <> nil) then
          begin
           // Verifição de alteração dos componentes da DevExpress
           if Assigned(ActiveControl.Parent) and (ActiveControl.Parent is TcxCustomTextEdit) and TcxCustomTextEdit(ActiveControl.Parent).ModifiedAfterEnter and (ActiveControl = ctr) then
            begin
             // Guardando texto
             s := TcxCustomTextEdit(ActiveControl.Parent).Text;
             // Invalidando entrada
             TcxCustomTextEdit(ActiveControl.Parent).Reset;

             // Verificando se o texto mudou
             if s <> TcxCustomTextEdit(ActiveControl.Parent).Text then
              begin
               TcxCustomTextEdit(ActiveControl.Parent).Text     := s;
               TcxCustomTextEdit(ActiveControl.Parent).ModifiedAfterEnter := True;
               Exit;
              end
            end;

           // Verificando se o TabOrder do componente atual é menor que o do anterior
           ctr := ActiveControl;
          end;

          while not (ctr.Parent is TForm) do
           ctr := ctr.Parent;

          if not(ctr.Parent is TForm) then
           begin
            if (ctr.Parent.TabOrder < i) or ((ctr.Parent.TabOrder = i) and (iQtdCmp <= 1)) then
             if btnGravar.Enabled then btnGravar.Click;
           end
          else if((ctr.TabOrder = i) and (iQtdCmp = 1)) or (ctr.TabOrder < i) then
           if btnGravar.Enabled then btnGravar.Click;
        end;

       ctr := nil;
      end;
    end;
   VK_DELETE :
    begin
     if (ActiveControl <> nil) and (ActiveControl.Parent <> nil) then
      begin
       if (ActiveControl.Parent is TcxCustomButtonEdit) then
        TcxCustomButtonEdit(ActiveControl.Parent).Clear;
      end;
    end;

   VK_F11    : if btnGravar.Enabled then btnGravar.Click;
   VK_ESCAPE : if btnCancelar.Enabled then btnCancelar.Click;
  end;

  {$IFDEF DEBUG}
   if Shift = [ssShift] then
    begin
     if Key = VK_UP then
     begin
      Clipboard.AsText := Self.Name;
      TMsgFunctions.Atention(Self.Name);
     end;
    end;
  {$ENDIF}

end;

procedure TfrmPadrao.FormShow(Sender: TObject);
begin
  Self.OpenDataSets;
  Self.Initialize;

  if Assigned(Self.DataSet) and (Pos('[', Self.Caption) = 0) and not Assigned(Self.PersistentObject) then
   Self.State := DataSet.State
  else if Assigned(Self.PersistentObject) then
   begin
    if Self.PersistentObject.New then
     Self.State := dsInsert
    else
     begin
      Self.State := dsEdit;
      Self.LoadObject;
     end;
   end;

  case Self.State of
   dsBrowse: Caption := Caption + ' - [Navegando]';
   dsEdit  : Caption := Caption + ' - [Alterando]';
   dsInsert: Caption := Caption + ' - [Inserindo]';
  end;

  TRegFunctions.WriteRegisterStr(HKEY_CURRENT_USER, 'Software\Sistema\ControleBovino', 'Opcao', Self.Caption);
end;

procedure TfrmPadrao.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  // Liberando recursos inicializados no método initialize
  Self.DeInitialize;

  // Fechando dataset's
  Self.CloseDataSets;
  FControlsToCheck := nil;
  Release;
  frmPadrao := nil;
  DObjectEvents := nil;
end;

procedure TfrmPadrao.btnGravarClick(Sender: TObject);
begin
  if not CheckControls then Abort;

  if Assigned(Self.PersistentObject) and Self.AutoPost then
   Self.SaveObject()
  else if FTemDataSet then
   begin
    if (FDataSet.State in [dsInsert, dsEdit]) and FAutoPost then
     begin
      FDataSet.Post;
      if FDataSet.Tag <> 3 then FDataSet.Tag := 0;
      if FStayOpen and FAutoInsert then FDataSet.Append;
     end;
   end;

  if not FStayOpen then ModalResult := mrOk;
end;

procedure TfrmPadrao.btnCancelarClick(Sender: TObject);
begin
  if (FDataSet <> nil) then
   if (FDataSet.State <> dsInsert) then ActiveControl := nil;

  if FTemDataSet then
   begin
    // Verificação se ocorreu alteração em algum campo
    if FDataSet.Modified and not TMsgFunctions.Question('Deseja cancelar as alterações?') then Exit;
    if ((FDataSet.State in [dsInsert, dsEdit]) and (FAutoCancel)) then FDataSet.Cancel;
   end
  else if FAskOnCancel and not TMsgFunctions.Question('Deseja cancelar as alterações?') then Exit;

  if Self.FormStyle = fsMDIChild then
   Self.Close
  else Self.ModalResult := mrCancel;
end;

procedure TfrmPadrao.DeInitialize;
begin
//
end;

procedure TfrmPadrao.FormActivate(Sender: TObject);
begin
  if FTemDataSet then
   if not(FDataSet.Active) then FDataSet.Open;
end;

procedure TfrmPadrao.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
  if not (FTemDataSet and FAutoPost) then Exit;

  if FDataSet.State <> dsBrowse then btnCancelar.Click;

  CanClose := FDataSet.State = dsBrowse;
end;

procedure TfrmPadrao.FormCreate(Sender: TObject);
begin
  FAutoInsert       := True;
  FAutoPost         := True;
  FConfigGrid       := True;
  FAutoCancel       := True;
  FCheckProcess     := True;
  FPersistentObject := nil;
  stlComponent      := TStringList.Create;

  FControlsToCheck := TObjectList.Create;
  FControlsToCheck.OwnsObjects := False;

  DObjectEvents := TObjectDictionary<TObject, TNotifyEvent>.Create;
end;


procedure TfrmPadrao.AddControlToCheck(ObjectControl: TObject);
begin
  if ObjectControl is TcxCustomEdit then
   FControlsToCheck.Add(ObjectControl)
  else
   begin
    TMsgFunctions.Error('Controle não adicionado: ' + ObjectControl.ClassName);
    PostMessage(Handle, WM_CLOSE, 0, 0);
    Exit;
   end;
end;

procedure TfrmPadrao.FormKeyPress(Sender: TObject; var Key: Char);
var
  i  : Integer;
  ctr: TWinControl;
begin
  if Key = #13 then
   begin
    if (ActiveControl is TcxCustomMaskEdit) or (ActiveControl is TcxCustomDateEdit) then
     begin
      // Armazenando TabOrder do componentes atual
      ctr := ActiveControl;
      i   := ctr.TabOrder;

      while not (ctr.Parent is TForm) do
       begin
        ctr := ctr.Parent;
        i   := ctr.TabOrder;
       end;
     end;

    if ActiveControl is TcxCustomDateEdit then
     begin
      Key := #0;

      if TcxCustomDateEdit(ActiveControl).ModifiedAfterEnter then
       begin
        TcxCustomDateEdit(ActiveControl).ValidateEdit(True);
        if not TcxCustomDateEdit(ActiveControl).ModifiedAfterEnter then
         Perform(WM_NEXTDLGCTL, 0, 0);
       end;
     end
    else if (ActiveControl is TcxCustomMaskEdit) then
     begin
      if TcxCustomMaskEdit(ActiveControl).ModifiedAfterEnter then
       begin
        Key := #0;
        TcxCustomMaskEdit(ActiveControl).ValidateEdit(True);
        if (ActiveControl <> nil) and not TcxCustomMaskEdit(ActiveControl).ModifiedAfterEnter then
         Perform(WM_NEXTDLGCTL, 0, 0);
       end;
     end;
    //Testando o controle para verificar se deve gerar o gravar.click pois no KeyDown não funciona para esse tipo de componente
    if (ActiveControl is TcxCustomMaskEdit) or (ActiveControl is TcxCustomDateEdit) then
     begin
      if not(ctr.Parent is TForm) then
       begin
        if (ctr.Parent.TabOrder < i) or ((ctr.Parent.TabOrder = i) and (iQtdCmp <= 1)) then
         if btnGravar.Enabled then btnGravar.Click;
       end
      else if((ctr.TabOrder = i) and (iQtdCmp = 1)) or (ctr.TabOrder < i) then
       if btnGravar.Enabled then btnGravar.Click;
     end;
   end;
end;

function TfrmPadrao.CanChangeFocus: Boolean;
begin
  Result := True;

  if (ActiveControl is TcxCustomInnerMemo) or
   (ActiveControl is TcxGridSite) then
   Result := False;

  if Assigned(ActiveControl.Parent) then
   if ActiveControl.Parent.Parent is TcxGridSite then
    Result := False;
end;

procedure TfrmPadrao.CfgObr;
var
  i: Integer;
begin
  stlComponent.Clear;

  // Variával que vai conter a qtdade de componentes
  iQtdCmp      := 0;

  Self.VerificarComponentes(Self);
  BAssigned := True;
end;

function TfrmPadrao.ChangePage(Page: TcxPageControl;
  bPerform: Boolean): Boolean;
var
 iIndexStartedPage, j: Integer;
begin
  // O result indica se a pagecontrol percorreu um ciclo. Enquanto ela estiver indo para frente é True, quando ela voltar False.
  Result := True;

  // Codigo para mudar para o proxima tabshet
  iIndexStartedPage := Page.ActivePageIndex;

  if Page.PageCount = Page.ActivePageIndex + 1 then j := 0
  else j := Page.ActivePageIndex + 1;

  while not Page.Pages[j].TabVisible and Result do
   begin
    Result := iIndexStartedPage < j;
    inc(j);

    if Page.PageCount = j then j := 0;
   end;

  if Page.Pages[j].TabVisible then Page.ActivePageIndex := j
  else Page.ActivePageIndex := iIndexStartedPage;

  if bPerform then Perform(WM_NEXTDLGCTL, 0, 0);
end;

{FUNÇÃO CRIADA PARA DAR O FOCO NO PRIMEIRO CAMPO DA LISTA DE QUE PRECISAM SEREM INFORMADOS... OBRIGATORIEDADE!}
procedure TfrmPadrao.SetFocusObject(Obj: TObject);
var
 LstObj: TObjectList;
 auxObj: TObject;
 i:      Integer;
begin
 try
  LstObj := TObjectList.Create;
  LstObj.Add(Obj);

  //ADICIONANDO NA LISTA DE TODOS OS NIVEIS EXISTENTES DO "OBJETO DO FOCO" ATÉ O "FORMULARIO"
  while not (Obj is TFormClass) do
   begin
    auxObj := TWinControl(Obj).Parent;
    LstObj.Add(auxObj);
    Obj := auxObj;
   end;

  //PERCORRENDO DO NÍVEL MAIS ALTO "FORMULARIO" ATÉ O NÍVEL MAIS BAIXO "OBJETO DO FOCO"
  for i := LstObj.Count -1 downto 0 do
   begin
    if (LstObj[i] is TFormClass) or (LstObj[i] is TcxPageControl) then
     Continue
    else if (LstObj[i] is TcxTabSheet) then //SE FOR UM TABSHEET, SETAR O "ACTIVE PAGE" DO PAGECONTROL
     TcxPageControl(LstObj[i+1]).ActivePageIndex := TcxTabSheet(LstObj[i]).TabIndex
    else if i = 0 then //FINALIZANDO .... COLOCANDO O FOCO NO OBJETO.
     TWinControl(LstObj[0]).SetFocus;
   end;
 finally
  //LstObj.Free;
 end;
end;

function TfrmPadrao.CheckControls: Boolean;
var
 i: Integer;
 sMsg, sCaption: String;
 objStl: TStringList;
 FirstObj: TObject;
begin
  Result        := False;
  ActiveControl := nil;

  objStl        := TStringList.Create;
  objStl.Sorted := True;
  try
   for i := 0 to FControlsToCheck.Count - 1 do
    if TcxCustomEdit(FControlsToCheck.Items[i]).ModifiedAfterEnter then Abort;

//   for i:= 0 to stlComponent.Count - 1 do
//    begin
//     if ((Vazio(TcxTextEdit(stlComponent.Objects[i]).Text) or OnlyMask(TcxTextEdit(stlComponent.Objects[i]).Text)) or
//        ((stlComponent.Objects[i] is TcxCustomMaskEdit) and (TcxCustomMaskEdit(stlComponent.Objects[i]).Text = '')) or
//        ((stlComponent.Objects[i] is TcxDBMaskEdit) and OnlyMask(TcxDBMaskEdit(stlComponent.Objects[i]).Text)) or
//        ((stlComponent.Objects[i] is TCurrencyEditN) and (TCurrencyEditN(stlComponent.Objects[i]).Value = 0.0)) or
//        ((stlComponent.Objects[i] is TcxCurrencyEdit) and (TcxCurrencyEdit(stlComponent.Objects[i]).Value = 0.0)) or
//        ((stlComponent.Objects[i] is TDBCurrencyEditN) and (TDBCurrencyEditN(stlComponent.Objects[i]).Value = 0.0))) and
//         (TComponent(stlComponent.Objects[i]).Tag <> 100 ) then
//      begin
//       sCaption := Trim(ExtractAll(TcxGroupBox(TWinControl(stlComponent.Objects[i]).Parent).Caption,'&'));
//
//       //ARMAZENO O PRIMEIRO OBJETO ENCONTRADO
//       if FirstObj = Nil then
//        FirstObj := stlComponent.Objects[i];
//
//       if objStl.IndexOf(sCaption) = -1 then
//        begin
//         objStl.Add(sCaption);
//         sMsg := sMsg + ALine + sCaption;
//        end;
//      end;
//    end;
//
//   if Cheio(sMsg) then
//    begin
//     Erro('O(s) seguinte(s) campo(s) precisa(m) ser preenchido(s): ' + ALine + sMsg);
//     Self.SetFocusObject(FirstObj);
//     Abort;
//    end;

   Result := True;
  finally
   objStl.Free;
  end;
end;

procedure TfrmPadrao.AssignExitEvent(Sender: TObject);
begin
  if Assigned(TcxCustomLookupComboBox(Sender).OnExit) then
   DObjectEvents.Add(Sender, TcxCustomLookupComboBox(Sender).OnExit);

  TcxCustomLookupComboBox(Sender).OnExit := Self.LookupExit;
end;

procedure TfrmPadrao.LookupExit(Sender: TObject);
begin
  TcxLookupComboBox(Sender).SetSelection(0,0);

  TcxLookupComboBox(Sender).Repaint;


  if DObjectEvents.ContainsKey(TcxLookupComboBox(Sender)) then
   DObjectEvents.Items[TcxLookupComboBox(Sender)](Sender);
end;

end.
